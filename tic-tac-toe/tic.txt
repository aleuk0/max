Работа проходит следующим образом:
1. Описывается то, как  ИИ (стратегия игры) видит игровое поле. ИИ у нас будет представлен одним фасадным классов, которому игра передаёт информацию о себе и получает от него команды\управляющее воздействие. ИИ не хранит ничего в файлах или БД, всё что он хочет запомнить он сохраняет в своих полях. Для простоты работы, в нашем случае, он может обращаться к общим для всех игроков данным, например, состоянию игрового поля, предыдущий ход противника и т.п.
2. После этого реализуется минимально возможный ИИ: стратегия которая делает случайных допустимый ход, когда её просят сделать ход. Минимальность ИИ на данном этапе нужна чтобы как можно быстрее получить работающую программу с минимумом ошибок. В сложных стратегиях легко облажаться. Вместо стратегии случайного хода можно написать стратегию последовательных ходов, т.е. стратегию которая просто заполняет все клетки по порядку. Задача этой стратегии не выиграть партию, а просто не сломаться в ходе выполнения программы, провести партию игры до конца, по правилам и в соответствии с минимальными ожиданиями.
3. Реализуется арбитр: программа, которая параметром принимает все ИИ (в КН их 2) и проводит между ними бой. Выводит результат каким-то образом.
4. Реализуются более интеллектуальные ИИ.
Обычно в соревнованиях ИИ учувствуют ИИ на разных языках программирования. Тогда, интерфейс ИИ с арбитром должен быть платформенно-независимым, например, HTTP API, т.е. набор URL откуда ИИ получает данные и куда шлёт свои ходы. На данном этапе нам это не нужно: все наши ИИ написан на одной платформе и на одном ЯП.
Было бы хорошо сделать арбитра с возможностью подключения внешних ИИ. Т.е. при старте арбитр:
1. Сканирует свою папку на предмет .dll файлов (в java аналог jar)
2. Загружает найденные dll через var dll = Assembly.LoadFile(dll)
3. Перебирает все типы этих сборок через dll.GetTypes()
4. Если тип реализует интерфейс стратегии ИИ, то создаёт экземпляр этого типа
5. Для всех найденных ИИ проводит турнир проведя по 3 боя каждого с каждым
Имейте ввиду, что такое поведение опасно для системы: если пользователь выполняет вашего арбитра из папки Downloads\Загрузки, то при вызове Assembly.LoadFile() может быть активирован малварь, вирус, или вообщей чейт-то нежелательный код, который оказался в этой папке по ошибке. Такая ошибка была, например в Nullsoft Intaller http://securelist.social-kaspersky.com/en/kadvisories/KLA10499
Переходим к сути лабораторной работы:
В этой лабораторной работе нужно разработать интерфейс стратегии игры в крестики нолики (3х3).
Результатом лабораторной работы являются C# код одного интерфейса, содержащего методы и свойства необходимые для того, чтобы объект, реализующий этот интерфейс мог:
1. Получать информацию о стороне за которую объект играет (крестики или нолики)
2. Передавать информации о своём названии и версии (всё одной строкой)
3. Получать информацию о состоянии игрового поля
4. Получать информацию о ходе противника
5. Передавать информацию о своём ходе